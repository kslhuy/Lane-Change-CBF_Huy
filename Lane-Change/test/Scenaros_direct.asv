clc
close all
clear 

dt = 0.01;
simulation_time = 15;
param_sys = ParamVeh();
scenario = 1; % 1 indicates highway, 2 indicates urban road

%% define driving lanes
if scenario == 1
    lane_width = 3.6;% Highway lane width in meters
elseif scenario == 2
    lane_width = 3;
end
% Create a straight lane with specified width and length
lanes = StraightLane(3, lane_width, 750);



param_opt = ParamOptEgo(dt);
%% define driving scenario
% car1 is in the same lane with ego vehicle , lane lowest
car1 = Vehicle(1, 0, param_sys, [80; 0.5 * lane_width; 0; 24], [0; 0], [], 1, dt, lanes, 0, 0, scenario);

% car2 , car3 is in the middle lane, lane middle
controller_car2 = Controller([], "IDM", param_opt, param_sys, lanes, []);
car2 = Vehicle(2, 0, param_sys, [60; 0.5 * lane_width; 0; 26], [0; 0], controller_car2, 1, dt, lanes, 0, 0, scenario);

controller_car3 = Controller([], "look_ahead", param_opt, param_sys, lanes, []);
car3 = Vehicle(3, 0, param_sys, [40; 0.5 * lane_width; 0; 26], [0; 0], controller_car3, 1, dt, lanes, 0, 0, scenario);

% car4 is in the lane highest
controller_car4 = Controller([], "look_ahead", param_opt, param_sys, lanes, []);
car4 = Vehicle(4, 0, param_sys, [20; 0.5 * lane_width; 0; 26], [0; 0], controller_car4, 1, dt, lanes, 0, 0, scenario);

controller_car5 = Controller([], "look_ahead", param_opt, param_sys, lanes, []);
car5 = Vehicle(5, 0, param_sys, [0; 0.5 * lane_width; 0; 26], [0; 0], controller_car5, 1, dt, lanes, 0, 0, scenario);


other_vehicles = [car1; car2; car3; car4;car5];
% controller_car1.other_vehicles = other_vehicles;
car2.controller.controller.other_vehicles = [car1];
% 
% % disp(car2.controller)
% disp(length(car2.controller.controller.other_vehicles) )
% 
car3.controller.controller.other_vehicles = [car1,car2];
car4.controller.controller.other_vehicles = [car1,car2,car3];
car5.controller.controller.other_vehicles = [car1,car2,car3,car4];







%% define a simulator and start simulation
simulator0 = Simulator(lanes, [] , other_vehicles, dt);
[state_log, input_log] = simulator0.startSimulation(simulation_time);
%% Plot the movement of the vehicles
num_vehicles = 5;
plot_movement_log(other_vehicles, dt, simulation_time, scenario, num_vehicles);

%% Function for plot

function [] = plot_movement_log(vehicles, dt, simulation_time, scenario, num_vehicles)
    figure(2)
    
    % Define vehicle labels for the legend
    vehicle_labels = arrayfun(@(i) sprintf('Vehicle %d', i), 1:num_vehicles, 'UniformOutput', false);
    
    % Plot velocity history
    subplot(5, 1, 1)
    hold on
    for i = 1:num_vehicles
        plot(0:dt:simulation_time, vehicles(i).state_log(4, :))
    end
    title('Velocity history')
    ylabel('m/s')
    xlabel('s')
    if scenario == 1
        ylim([14, 36])
    elseif scenario == 2
        ylim([7, 17])
    end
    legend(vehicle_labels)
    hold off

    % Plot steering history
    subplot(5, 1, 2)
    hold on
    for i = 1:num_vehicles
        plot(0:dt:simulation_time, vehicles(i).input_log(2, :))
    end
    title('Steering history')
    ylabel('rad')
    xlabel('s')
    ylim([-0.05, 0.05])
    legend(vehicle_labels)
    hold off

    % Plot yaw history
    subplot(5, 1, 3)
    hold on
    for i = 1:num_vehicles
        plot(0:dt:simulation_time, vehicles(i).state_log(3, :))
    end
    title('Yaw history')
    ylabel('rad')
    xlabel('s')
    ylim([-0.3, 0.3])
    legend(vehicle_labels)
    hold off

    % Plot position X history
    subplot(5, 1, 4)
    hold on
    for i = 1:num_vehicles
        plot(0:dt:simulation_time, vehicles(i).state_log(1, :))
    end
    title('Position X history')
    ylabel('m')
    xlabel('s')
    legend(vehicle_labels)
    hold off

    % Plot position Y history
    subplot(5, 1, 5)
    hold on
    for i = 1:num_vehicles
        plot(0:dt:simulation_time, vehicles(i).state_log(2, :))
    end
    title('Position Y history')
    ylabel('m')
    xlabel('s')
    legend(vehicle_labels)
    hold off
end