function attack_module =  Atk_Scenarios(attack_module , attack_type ,data_type, case_num , t_star,t_end , attacker_id , victim_id)


    if (attack_type == "Bogus")
    %% Scenario I: Bogus Messages
    % Attack Type: False information on velocity or position
    % Effect: Vehicles react to incorrect velocity or position values.

        switch case_num
            case 1
                % Case 1: Underestimated velocity (0.5 * real velocity)
                scenario1_Case1 = struct('attacker_id', attacker_id, ...
                                        'victim_id', victim_id, ...
                                        'start_time', t_star, ...
                                        'end_time', t_end, ...
                                        'attack_type', 'scaling', ...
                                        'fault_intensity', -0.5, ... % 50% reduction
                                        'data_type', data_type, ...
                                        'attack_row', 'velocity');
                scenario = scenario1_Case1;
            case 2
                % Case 2: Overestimated velocity (1.5 * real velocity)
                scenario1_Case2 = struct('attacker_id', attacker_id, ...
                                        'victim_id', victim_id, ...
                                        'start_time', t_star, ...
                                        'end_time', t_end, ...
                                        'attack_type', 'scaling', ...
                                        'fault_intensity', 0.5, ... % 50% increase
                                        'data_type', data_type, ...
                                        'attack_row', 'velocity');
                scenario = scenario1_Case2;
            case 3
                % Case 3: Underestimated position (real position - 15m)
                scenario1_Case3 = struct('attacker_id', attacker_id, ...
                                        'victim_id', victim_id, ...                                                
                                        'start_time', t_star, ...
                                        'end_time', t_end, ...
                                        'attack_type', 'bias', ...
                                        'fault_intensity', -15, ... % Position decrease
                                        'data_type', data_type, ...
                                        'attack_row', 'X'); 
                scenario = scenario1_Case3;
            case 4
                % Case 4: Overestimated position (real position + 33m)
                scenario1_Case4 = struct('attacker_id', attacker_id, ...
                                        'victim_id', victim_id, ...
                                        'start_time', t_star, ...
                                        'end_time', t_end, ...
                                        'attack_type', 'bias', ...
                                        'fault_intensity', 33, ... % Position increase
                                        'data_type', data_type, ...
                                        'attack_row', 'X');
                scenario = scenario1_Case4;
            otherwise
                disp("Invalid case number");
        end

   
    elseif (attack_type == "Replay/Delay")
    %% Scenario II: Replay/Delay Attacks
    % Attack Type: Replaying acceleration/deceleration values
    % Effect: Vehicles keep outdated speed values, causing instability.

        switch case_num
            case 1
                % Case 1: Replay acceleration (use previous acceleration)
                scenario2_Case1 = struct('attacker_id', attacker_id, ...
                                        'victim_id', victim_id, ...
                                        'start_time', t_star, ...
                                        'end_time', t_end, ...
                                        'attack_type', 'bias', ...
                                        'fault_intensity', 0.5, ... % Replay acceleration
                                        'data_type', data_type, ...
                                        'attack_row', 'velocity');
                scenario = scenario2_Case1;
            case 2
                % Case 2: Replay deceleration (use previous deceleration)
                scenario2_Case2 = struct('attacker_id', attacker_id, ...
                                        'victim_id', victim_id, ...    
                                        'start_time', t_star, ...
                                        'end_time', t_end, ...
                                        'attack_type', 'bias', ...
                                        'fault_intensity', -0.5, ... % Replay deceleration
                                        'data_type', data_type, ...
                                        'attack_row', 'velocity');
                scenario = scenario2_Case2;
            otherwise
                disp("Invalid case number");
        end




    elseif (attack_type == "Collusion")
    %% Scenario III: Collusion Attacks
    % Attack Type: Three vehicles broadcasting false messages at the same time
    % Effect: Severe platoon instability due to multiple compromised vehicles.
        switch case_num
            case 1
                % Case 1: Collusion with underestimated velocity (0.5 * real velocity)
                scenario3_Case1 = struct('attacker_id', [1,3], ...
                                        'victim_id', victim_id, ...
                                        'start_time', t_star, ...
                                        'end_time', t_end, ...
                                        'attack_type', 'scaling', ...
                                        'fault_intensity', -0.5, ...
                                        'data_type', data_type, ...
                                        'attack_row', 'velocity');
                scenario = scenario3_Case1;
            case 2
                % Case 2: Collusion with overestimated velocity (1.5 * real velocity)
                scenario3_Case2 = struct('attacker_id', [3,4], ...
                                        'victim_id', victim_id, ...
                                        'start_time', t_star, ...
                                        'end_time', t_end, ...
                                        'attack_type', 'scaling', ...
                                        'fault_intensity', 0.5, ...
                                        'data_type', data_type, ...
                                        'attack_row', 'velocity');
                scenario = scenario3_Case2;
            case 3
                % Case 3: Collusion with underestimated position (real position - 15m)
                scenario3_Case3 = struct('attacker_id', [3,4], ...
                                        'victim_id', victim_id, ...
                                        'start_time', t_star, ...
                                        'end_time', t_end, ...
                                        'attack_type', 'bias', ...
                                        'fault_intensity', -15, ...
                                        'data_type', data_type, ...
                                        'attack_row', 'X');
                scenario = scenario3_Case3;
            case 4
                % Case 4: Collusion with overestimated position (real position + 33m)
                scenario3_Case4 = struct('attacker_id', [1, 3], ...
                                        'victim_id', victim_id, ...
                                        'start_time', t_star, ...
                                        'end_time', t_end, ...
                                        'attack_type', 'bias', ...
                                        'fault_intensity', 33, ...
                                        'data_type', data_type, ...
                                        'attack_row', 'X');
                scenario = scenario3_Case4;
            otherwise
                disp("Invalid case number");
        end

   
    else
        attack_module.setScenario('none', []);
        return;
    end

    disp(scenario);
    attack_module.setScenario('time_based', scenario);

end